/*
[과제#5-2] 로또번호 생성기 프로그램
요구사항 : [실습#1]의 로또번호 생성기를 바탕으로 1부터 45까지의 숫자 중에서
임의의 숫자 6개가 맞아야 하는 로또 번호 생성기 프로그램 작성.
사용자로부터 몇 장의 로또를 구매할 것인지를 입력 받아
6개의 임의의 숫자가 출력된 로또 1매를 사용자로부터 입력 받은
구매숫자만큼 출력.
구매할 로또의 개수를 입력하세요 : 3
1번 로또 : 13 20 34 8 42 31
2번 로또 : 41 22 15 19 33 38
3번 로또 : 7 36 24 19 20 44
고려사항 :
1) 1장의 로또에서 출력되는 임의의 숫자 6개는 중복되면 안된다.
“중복번호 피하는 알고리즘”이 핵심.
2) chapter10 장의 배열부분을 보고 배열을 사용하여 생성된 임의의
난수를 저장한다
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>


int sorting(int lottery[6]) {
	//가장 비효율적인 이중 for문으로 배열을 돌리면서 비교하는 방법을 사용함
	for (int i = 0; i < 6; i++) {
		//각 칸을 돈다.
		for (int j = 0; j < i; j++) {
			//그 전 칸의 값들과 비교한다
			if (lottery[i] < lottery[j]) {
				//만약 해당 칸이 전의 칸들보다 작다면
				int t = lottery[j];
				lottery[j] = lottery[i];
				lottery[i] = t;
				//서로 위치 바꾸기
				//작은 값을 앞으로, 큰 값을 뒤로 가도록 정렬함
			}
		}
	}
}

int main() {

	srand(time(NULL));
	//시간에 따라 랜덤하도록 함
	int number_of_lottery;
	//로또 개수입력
	int lottery[6];
	//로또의 숫자는 6개로 고정됨

	printf("구매할 로또의 개수를 입력하세요 :");
	scanf_s("%d", &number_of_lottery);
	//로또 개수입력 안내 및 입력받기

	for (int i = 1; i < number_of_lottery + 1; i++) {
		printf("\n%2d번째 로또 : ", i);
		//입력받은 로또의 개수 세기, 몇번쨰인지 안내 출력

		for (int j = 0; j < 6; j++) {
			//매 로또 칸에 랜덤하게 숫자 생성
			lottery[j] = (rand() % 45) + 1;

			for (int k = 0; k < j; k++) {
				//각 로또를 전 값들과 비교해 같으면 새로운 값 입력함
				if (lottery[j] == lottery[k]) {
					lottery[j] = (rand() % 45) + 1;
				}
			}//만들어진 중복없는 로또 내용 출력함
			printf("%4d", lottery[j]);
		}//정렬한 후의 값 안내
		printf("    정렬하기");
		sorting(lottery);
		//정렬한 후 보내줌
		//배열은 그 자체가 포인터 역할을 할 수 있기 떄문에 상관 없음
		//각 주소에 연결되어 함수로 바로 사용 가능
		for (int i = 0; i < 6; i++) {
			//정렬된 로또 출력
			printf("%4d", lottery[i]);
		}
	}
	return 0;
}
/*1. 중복을 피하기 위해
			for (int k = 0; k < j; k++) {
				//각 로또를 전 값들과 비교해 같으면 새로운 값 입력함
				if (lottery[j] == lottery[k]) {
					lottery[j] = (rand() % 45) + 1;
				}
	부분을 넣음

2. 랜덤한 값을 각 배열에 넣기 위해서
		for (int j = 0; j < 6; j++) {
			//매 로또 칸에 랜덤하게 숫자 생성
			lottery[j] = (rand() % 45) + 1;
	부분을 넣음

3. 보기 편하도록 정렬 함수를 만듦
for (int i = 0; i < 6; i++) {
		//각 칸을 돈다.
		for (int j = 0; j < i; j++) {
			//그 전 칸의 값들과 비교한다
			if (lottery[i] < lottery[j]) {
				//만약 해당 칸이 전의 칸들보다 작다면
				int t = lottery[j];
				lottery[j] = lottery[i];
				lottery[i] = t;
				//서로 위치 바꾸기
				//작은 값을 앞으로, 큰 값을 뒤로 가도록 정렬함
			}
		}
	}

비효율적이지만 로또를 만 장 이상 사지 않는다고 가정하고
이러한 코드를 사용했다.
*/